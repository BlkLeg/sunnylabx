# =============================================================================
# SunnyLabX - DevOps & Code Quality Stack
# Node: thousandsunny (Node #1)
# Category: Infrastructure & Development
# =============================================================================
# Services: Docker Registry, SonarQube, Registry UI, SonarQube PostgreSQL
# Purpose: Private image hosting and code quality analysis
# Network: Development network with secure registry and code analysis
# =============================================================================

services:
  # Docker Registry - Private image repository
  registry:
    image: registry:2.8
    container_name: docker-registry
    restart: unless-stopped
    environment:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: "['*']"
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: "['HEAD','GET','OPTIONS','DELETE']"
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: "['Authorization','Accept','Cache-Control']"
    volumes:
      - registry_data:/var/lib/registry
      - ./registry/auth:/auth:ro
      - ./registry/config.yml:/etc/docker/registry/config.yml:ro
    ports:
      - "5000:5000"
    networks:
      - devops_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry.rule=Host(`registry.lab.local`)"
      - "traefik.http.services.registry.loadbalancer.server.port=5000"

  # Docker Registry UI - Web interface for registry
  registry-ui:
    image: joxit/docker-registry-ui:latest
    container_name: registry-ui
    restart: unless-stopped
    environment:
      SINGLE_REGISTRY: true
      REGISTRY_TITLE: SunnyLabX Docker Registry
      DELETE_IMAGES: true
      SHOW_CONTENT_DIGEST: true
      NGINX_PROXY_PASS_URL: http://registry:5000
      SHOW_CATALOG_NB_TAGS: true
      CATALOG_MIN_BRANCHES: 1
      CATALOG_MAX_BRANCHES: 1
      TAGLIST_PAGE_SIZE: 100
      REGISTRY_SECURED: false
      CATALOG_ELEMENTS_LIMIT: 1000
    ports:
      - "5001:80"
    networks:
      - devops_network
    depends_on:
      - registry
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry-ui.rule=Host(`registry-ui.lab.local`)"
      - "traefik.http.services.registry-ui.loadbalancer.server.port=80"

  # PostgreSQL for SonarQube
  sonarqube-postgres:
    image: postgres:16-alpine
    container_name: sonarqube-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${SONARQUBE_DB_NAME:-sonar}
      POSTGRES_USER: ${SONARQUBE_DB_USER:-sonar}
      POSTGRES_PASSWORD: ${SONARQUBE_DB_PASSWORD:-changeme}
    volumes:
      - sonarqube_postgres_data:/var/lib/postgresql/data
    networks:
      - devops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SONARQUBE_DB_USER:-sonar}"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"

  # SonarQube - Code quality and security analysis
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-postgres:5432/${SONARQUBE_DB_NAME:-sonar}
      SONAR_JDBC_USERNAME: ${SONARQUBE_DB_USER:-sonar}
      SONAR_JDBC_PASSWORD: ${SONARQUBE_DB_PASSWORD:-changeme}
      SONAR_WEB_HOST: 0.0.0.0
      SONAR_WEB_PORT: 9000
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    ports:
      - "9000:9000"
    networks:
      - devops_network
    depends_on:
      - sonarqube-postgres
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
      nproc: 8192
    sysctls:
      vm.max_map_count: 524288
      fs.file-max: 131072
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`sonar.lab.local`)"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"

  # SonarQube Scanner - CLI tool for code analysis
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonar-scanner
    restart: "no"
    environment:
      SONAR_HOST_URL: http://sonarqube:9000
    volumes:
      - sonar_scanner_cache:/opt/sonar-scanner/.sonar/cache
      - ./scanner/projects:/usr/src:ro  # Mount project directories
    networks:
      - devops_network
    depends_on:
      - sonarqube
    profiles:
      - tools  # Only start manually when needed
    labels:
      - "traefik.enable=false"

  # Nexus Repository Manager - Alternative artifact repository
  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    restart: unless-stopped
    environment:
      NEXUS_SECURITY_RANDOMPASSWORD: false
    volumes:
      - nexus_data:/nexus-data
    ports:
      - "8083:8081"  # Web UI (changed from 8081 to avoid conflict)
      - "8084:8082"  # Docker registry port (changed from 8082)
    networks:
      - devops_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nexus.rule=Host(`nexus.lab.local`)"
      - "traefik.http.services.nexus.loadbalancer.server.port=8081"

networks:
  devops_network:
    driver: bridge
    name: devops_network

volumes:
  registry_data:
    driver: local
  sonarqube_postgres_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local
  sonar_scanner_cache:
    driver: local
  nexus_data:
    driver: local